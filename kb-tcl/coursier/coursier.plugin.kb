package provide coursier 1.0

namespace eval coursier {

    set tcFolder ".kb/toolchain/coursier"
    set outputFolder "repository"

    set binPath ""

    set repositories {ivy2Local central sonatype:releases}

    ## Repos
    ###############
    proc addRepository url {
        lappend coursier::repositories $url
    }

    ## On Load -> Toolchain
    ###########
    kiss::toolchain::register coursier {
        puts "Init Coursier Toolchain"

        exec mkdir -p ${coursier::tcFolder}

        #curl -fL "https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz" | gzip -d > cs
        #https://dlcdn.apache.org//ant/ivy/2.5.2/apache-ivy-2.5.2-bin.tar.gz
        #set url "https://dlcdn.apache.org//ant/ivy/2.5.2/apache-ivy-${ivy::version}-bin.tar.gz"

        #if {[file exists ]}
        set coursier::binPath [file normalize ${coursier::tcFolder}/cs-x86_64-pc-linux]
        
        if {![file exists ${coursier::binPath}]} {
            puts "Downloading Coursier"
            kiss::utils::download "https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz" ${coursier::tcFolder}/cs-x86_64-pc-linux.gz
            kiss::utils::execIn ${coursier::tcFolder} gunzip -d cs-x86_64-pc-linux.gz
            kiss::utils::execIn ${coursier::tcFolder} chmod +x cs-x86_64-pc-linux
            #kiss::utils::execIn $tcFolder curl -fL "https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz" | gzip -d > cs
        } else {
            puts "Coursier TC ready in ${coursier::binPath}"
        }
    }

    ## Fetch
    ##############
    set currentDeps {}
    proc + {dep args} {
        set outFolder [uplevel {set outFolder}] 
        #puts "Getting to $outFolder"
        lappend coursier::currentDeps $dep
        #coursier::runtime::fetchSingle $outFolder org.apache.commons commons-lang3 3.14.0 --default=true --javadoc --sources 
        log.info "Fetching $dep"
        set files [coursier::runtime::fetchSingle $dep {*}$args]
        log.info "- Result: $files"

        ## Parse result to sort dependencies in main artifact, javadoc, sources
        set sortedDeps [dict create]
        foreach resolvedFile $files {
            set tail [file tail $resolvedFile]
            switch -glob $tail {
                *-sources.jar {
                    log.debug "$resolvedFile is sources"
                    dict lappend sortedDeps [string map {-sources ""} $tail] sources $resolvedFile
                }
                *-javadoc.jar {
                    log.debug "$resolvedFile is javadoc"
                    dict lappend sortedDeps [string map {-javadoc ""} $tail] doc $resolvedFile
                }
                default {
                    log.debug "$resolvedFile is lib"
                    dict lappend sortedDeps $tail lib $resolvedFile
                }
            }
            
        }
        log.debug "Result map: $sortedDeps"
        #exit 0 
        #kiss::dependencies::addDeps [uplevel {set module}] {*}$files
        kiss::dependencies::addDeps [uplevel {set module}] $sortedDeps
    }
    proc fetchAll {module deps} {

        set outFolder ${coursier::tcFolder}/repository/$module 
        file mkdir $outFolder

        ## Load deps
        eval $deps


    }

    proc fetchSingleLib {dep} {
        return [coursier::runtime::fetchSingle $dep]
    }

    namespace eval runtime {

        proc fetchSingle {dep args} {
            set repos {}
            foreach r $coursier::repositories {
                lappend repos -r $r
            }
            return [kiss::terminal::callIn ${coursier::tcFolder} ${coursier::binPath} fetch -q {*}$repos {*}$args $dep]
        }
    }
}