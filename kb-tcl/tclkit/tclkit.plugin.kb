package provide kissb.tclkit 1.0
package require kissb.builder.podman
package require kissb.docker 

namespace eval tclkit {

    set workFolder .kb/tclkit
    set packageFolder [file dirname [file normalize [info script]]]

    proc buildStarkitWithLibsAndMain {libs name main} {
        
        builder.selectDockerRuntime

        ## Prepare Builder image
        # Prepare builder image
        docker.image.build ${tclkit::packageFolder}/Dockerfile.builder kissb-tclkitbuilder:latest

        files.inDirectory ${tclkit::workFolder} {
            files.require kitcreator-trunk-tip/kitcreator {
                files.download http://kitcreator.rkeene.org/fossil/tarball/kitcreator-trunk-tip.tar.gz?uuid=trunk kitcreator-trunk-tip.tar.gz
                files.extract kitcreator-trunk-tip.tar.gz
            }
            files.require sdx.kit {
                exec.run wget --no-check-certificate https://chiselapp.com/user/aspect/repository/sdx/uv/sdx-20110317.kit -O sdx.kit

            }

            env KIT_NAME tclkit
            env KIT_TCL_VERSION 8.6.14
            env KIT_KITCREATOR_PKGS "tk tcllib tls zlib tclvfs mk4tcl"
            env KIT_KITCREATOR_USR_PKGS $libs

             
            files.inDirectory kitcreator-trunk-tip {

                
                foreach l $libs {
                    #exec rm -Rf $l
                    files.delete $l
                    #exec.run ln -s ../../../$l $l
                    log.info "Copying [file normalize ../../../$l] to [pwd]"
                    files.cp [file normalize ../../../$l] [pwd]/$l
                    #exec.run cp -Rf ../../../$l .
                }

                # Patch kitsh
                log.info "Patching kitsh with ${tclkit::packageFolder}/kitsh.build.patch..."
                files.inDirectory kitsh {
                    catch {exec.run patch -sf build.sh -i ${tclkit::packageFolder}/kitsh.build.patch}
                }
                
                # Build Tclkit with Kissb
                set tclKitOutput tclkit-$::KIT_TCL_VERSION
                builder.image.run kissb-tclkitbuilder:latest {
                    export KITCREATOR_PKGS="[concat $::KIT_KITCREATOR_PKGS $::KIT_KITCREATOR_USR_PKGS]"

                    ./kitcreator retry $::KIT_TCL_VERSION --enable-64bit
                }

                # Kit is ready
                # Create starkit
                # Build Starkit for Kissb entrypoints
                set sdxOutputName [lindex [split [file tail $main] .] 0]
                log.info "SDX base name is $sdxOutputName"

                files.delete ${sdxOutputName}.vfs
                files.delete ${sdxOutputName}.kit
                files.cp ./$tclKitOutput ./tclkit-starkit
                exec.run ./$tclKitOutput ../sdx.kit qwrap $main
                exec.run ./$tclKitOutput ../sdx.kit unwrap ${sdxOutputName}.kit
                exec.run ./$tclKitOutput ../sdx.kit wrap ${sdxOutputName}.kit -runtime tclkit-starkit
                
                files.delete ./tclkit-starkit
                catch {exec.run mv ${sdxOutputName}.kit ${name}.kit}
                
                return [file normalize ${name}.kit]

                # Combine Tclkit with kissb
                #files.delete ${name}.vfs
                #exec.run ./$tclKitOutput ../sdx.kit unwrap ${name}.kit
                #files.cp ./$tclKitOutput ./tclkit-starkit
                #exec.run ./$tclKitOutput ../sdx.kit wrap ${name}.kit -runtime tclkit-starkit
                #files.delete ./tclkit-starkit

                #return ${name}.kit
            }

            
        }
        
    }

}