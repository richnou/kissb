# SPDX-FileCopyrightText: 2024 KISSB
#
# SPDX-License-Identifier: Apache-2.0

package provide kissb.kotlin 1.0
package require kissb.coursier

namespace eval kotlin {

    set tcFolder ".kb/toolchain/kotlin"
    set baseBuildFolder ".kb/build/kotlin"
    #set baseBuildFolder ".kb/build/kotlin"

    #set kotlinVersion "2.0.0"

    vars.define kotlin.version 2.1.0

    proc _buildirForModule module {
        return [kiss::vars::get kotlin.compiler.buildDir]/$module/classes
    }

    proc init module {

        kotlin.dependencies.add $module org.jetbrains.kotlin:kotlin-stdlib:[vars.resolve kotlin.version]
    }

    proc compile module {

        set outputFolder $kotlin::baseBuildFolder/$module/classes
        file mkdir $outputFolder

        set sources [kiss::sources::getSources $module]
        log.info "Kotlin Compiling $sources for module $module"
        if {[llength $sources] == 0} {
            log.warn "No sources to compile"
            return 
        }
        #log.info "Deps: [kiss::dependencies::getDeps $module]"
        #set cpString [join  [kiss::dependencies::getDeps $module] ":"]
        #log.info "Dep string: $cpString"

        set depsList [kiss::dependencies::resolveDeps $module lib]
        set cpString [join $depsList [kiss::files::pathSeparator]]

        log.info "Deps: $depsList"

        set args [concat [kiss::vars::get kotlin.compiler.args] [kiss::vars::get ${module}.kotlin.compiler.args]]
        log.info "Compile args: $args"

        ## Write command to file
        kiss::files::writeText $kotlin::baseBuildFolder/${module}.kotlinargs "$sources \
                                    -classpath $cpString \
                                    -d [_buildirForModule $module] \
                                    $args"

        #exit 0
        kiss::utils::execIn $kotlin::baseBuildFolder $kotlin::tcFolder/kotlinc/bin/kotlinc @$kotlin::baseBuildFolder/${module}.kotlinargs
        #kiss::utils::execIn [pwd] $kotlin::tcFolder/kotlinc/bin/kotlinc \
                                    {*}$sources \
                                    -classpath $cpString \
                                    -d [_buildirForModule $module] \
                                    {*}$args

        log.success "Done compiling"

    }

    proc assemble {module outputName} {

        set compileFolder $kotlin::baseBuildFolder/$module/classes

        set sources [kiss::sources::getSources $module]
        puts "Assembling Compiling $sources for module $module"

        set deps [kiss::dependencies::getDeps $module]
        puts "Dependencies: $deps"

        kiss::utils::execIn [pwd] $kotlin::tcFolder/kotlinc/bin/kotlinc $sources -cp $deps -include-runtime -d $outputName.jar

    }

    ## This method runs a main class for a module - it doens't compile, users should setup targets to first compile then run
    proc run {module class} {

        log.info "Compiling and running $module main class $class"

        # Set UI Env variable for Linux WSL
        # In WSL with Xming or WSLg, LIBGL should be indirect otherwise openGL acceleration crashes the JVM with SIGSEGV
        if {[kiss::utils::isLinuxWSL]} {
            # LIBGL_ALWAYS_INDIRECT=true
            set ::env(LIBGL_ALWAYS_INDIRECT) true
        }
        

        # Compile
        #compile $module

        # Run
        set cp [concat [_buildirForModule $module] [kiss::dependencies::resolveDeps $module lib]]
        kiss::utils::execIn [pwd] java -cp [join $cp [kiss::files::pathSeparator]] $class
    }

    ## On Load
    ###########
    kiss::toolchain::register kotlin-2 {
        #puts "Testing Toolchain Init"

        kiss::toolchain::init coursier

        #set  ::kotlin::tcFolder [file normalize ".kb/toolchain/kotlin"]
        set  ::kotlin::tcFolder $toolchainFolder
        file mkdir $::kotlin::tcFolder

        set kotlin::baseBuildFolder [file normalize $kotlin::baseBuildFolder]
        file mkdir $::kotlin::baseBuildFolder

        #if {[file exists ]}
        #puts "Downloading"
        if {![file exists $::kotlin::tcFolder/kotlinc/bin/kotlinc]} {
            kiss::utils::download https://github.com/JetBrains/kotlin/releases/download/v2.0.0/kotlin-compiler-2.0.0.zip $::kotlin::tcFolder/kotlinc.zip
            if {[kiss::utils::isWindows]} { 
                kiss::utils::execIn ${::kotlin::tcFolder} powershell -command "Expand-Archive kotlinc.zip -DestinationPath ."
            } else {
                kiss::utils::execIn $::kotlin::tcFolder unzip  kotlinc.zip
            }
            
        } else {
            log.debug "Kotlin TC ready"
        }

        ## Setup args
        ###########
        kiss::vars::append kotlin.home $::kotlin::tcFolder/kotlinc
        kiss::vars::append kotlin.compiler.args -kotlin-home      $::kotlin::tcFolder/kotlinc
        kiss::vars::append kotlin.compiler.args -language-version 2.0
        kiss::vars::append kotlin.compiler.args -Xenable-incremental-compilation

        #kiss::vars::set kotlin.version ${kotlin::kotlinVersion}

        ## Set JVM target/source from java
        kiss::vars::set jvm.target 1.8
        kiss::vars::set jvm.source 1.8

        kiss::vars::append kotlin.compiler.buildDir $::kotlin::baseBuildFolder
        
    }


    ## Build Server Output
    ####################
    namespace eval buildserver {

        proc generate {module args} {
            log.info "Generating Kotlin Build Server Config"

            set bsFile $::kotlin::baseBuildFolder/build.$module.json

            kiss::json::write $bsFile [subst {
                toolchain "kotlin-2"
                platform "jvm"
                module $module
                env {
                    kotlin.home "$::kotlin::tcFolder/kotlinc"
                }
                buildDirectory [kiss::vars::get kotlin.compiler.buildDir]/$module/classes
                args:: [list [concat [kiss::vars::get kotlin.compiler.args] [kiss::vars::get ${module}.kotlin.compiler.args]]]

                sources:: [list [kiss::sources::getSources $module]]

                classpath  [list [kiss::dependencies::getDeps $module]]
            }]
        }
    }


    ############################
    ## Extension for kotlin
    ######################
    kissb.extension kotlin {

        init args {
            kiss::toolchain::init kotlin-2
        }
        
        module {name {script {}}} {
            kotlin::init $name
            uplevel [list eval $script]
        }

        compiler.jvm.target v {
            kiss::vars::set jvm.target $v
            kiss::vars::append kotlin.compiler.args -jvm-target $v
        }
        compiler.jvm.source v {
            kiss::vars::set jvm.source $v
            kotlin.compiler.jvm.target $v
        }

        sources.add {module args} {
            foreach folder $args {
                kiss::sources::addSourceFolder $module $folder
            }
        }

        dependencies.compile {module deps} {
            foreach dep $deps {
                kiss::dependencies::addDepSpec $module $dep coursier
                #coursier::fetchAll $module {
                #    upvar dep dep
                #    + $dep
                #}
                
            }
        }
        dependencies.add {module deps} {
            foreach dep $deps {
                kiss::dependencies::addDepSpec $module $dep coursier
                #coursier::fetchAll $module {
                #    upvar dep dep
                #    + $dep
                #}
                
            }
        }

        project.eclipse outPath {
            kotlin::eclipse::generate $outPath
        }

    }


    #####################
    ## Eclipse Project 
    #####################
    namespace eval eclipse {
    
        proc generate outPath {
            
            ## Generate Project output
            ##############
            set projectName [file tail [file normalize [pwd]]]
            set projectFile [file normalize $outPath/.project]
            set classpathFile [file normalize $outPath/.classpath]
            
            log.info "Generating Eclipse project to $projectFile"
            files.writeText $projectFile [subst {<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
    <name>$projectName</name>
    <comment/>
    <projects/>
    <buildSpec>
        <buildCommand>
            <name>org.eclipse.jdt.core.javabuilder</name>
            <arguments/>
        </buildCommand>
    </buildSpec>
    <natures>
        <nature>org.eclipse.jdt.core.javanature</nature>
    </natures>
</projectDescription>
            }]

            files.writeText $outPath/${projectName}.iml [subst {<?xml version="1.0" encoding="UTF-8"?>
<module classpath="eclipse" classpath-dir="\$MODULE_DIR\$" type="JAVA_MODULE" version="4" />
            }]

            files.writeText $classpathFile [subst {<?xml version="1.0" encoding="UTF-8"?>
<classpath>
            }]

            foreach sourceFolder [kiss::sources::getSourceFolders main] {
                files.appendText $classpathFile "<classpathentry kind=\"src\" path=\"$sourceFolder\"/>\n"
            }
            files.appendText $classpathFile "<classpathentry kind=\"output\" path=\"[kiss::vars::get kotlin.compiler.buildDir]/main/classes\"/>"
            files.appendText $classpathFile "</classpath>"
        }
    }


    #####################
    ## Dokka
    #####################
    namespace eval dokka {
        
        set version 1.9.20

        kiss::vars::set dokka.build.output .kb/build/dokka
        kiss::vars::set dokka.version 1.9.20


        proc help args {
            ## Get Artifact for Dokka CLI
            set dokkaCliJar [coursier::fetchSingleLib org.jetbrains.dokka:dokka-cli:1.9.20]
            execIn [pwd] java -jar $dokkaCliJar -help {*}$args

        }
        proc run args {
            ## Get Artifact for Dokka CLI
            set dokkaCliJar [coursier::fetchSingleLib org.jetbrains.dokka:dokka-cli:1.9.20]
            execIn [pwd] java -jar $dokkaCliJar {*}$args

        }
        proc generate module {
            
            ## Get Dependencies for Dokka output plugin to buildup classpath
            lappend dokkaHtmlDep {*}[coursier::fetchSingleLib org.jetbrains.dokka:dokka-base:${::dokka.version}]
            lappend dokkaHtmlDep {*}[coursier::fetchSingleLib org.jetbrains.dokka:analysis-kotlin-descriptors:${::dokka.version}]
            lappend dokkaHtmlDep {*}[coursier::fetchSingleLib org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.0]
            lappend dokkaHtmlDep {*}[coursier::fetchSingleLib org.freemarker:freemarker:2.3.31]

            #puts "DOKKA/ [join $dokkaHtmlDep ";"]"
            
            ## Get Artifact for Dokka CLI
            set dokkaCliJar [coursier::fetchSingleLib org.jetbrains.dokka:dokka-cli:1.9.20]


            # Get dependencies and return only libs
            set deps [join [kiss::dependencies::resolveDeps $module lib] ";"]
         
            ## Run
            files.mkdir ${::dokka.build.output}/$module
            execIn [pwd] java   -jar $dokkaCliJar -pluginsClasspath [join $dokkaHtmlDep ";"] \
                                -sourceSet "-src [join [kiss::sources::getSourceFolders $module] ;] -classpath $deps" \
                                -outputDir ${::dokka.build.output}/$module

            ## Report output 
            log.success "Generated Dokka HTML in ${::dokka.build.output}/$module"

        
        }

        kissb.extension dokka {
            generate module {
                kotlin::dokka::generate $module
            }
        }
    
    }
}