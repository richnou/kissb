# SPDX-FileCopyrightText: 2024 KISSB
#
# SPDX-License-Identifier: Apache-2.0

package provide kissb 1.0


namespace eval kiss {

    #####################
    ## Functions definition
    #######################
    proc ::def {name arguments script} {
        ::proc $name $arguments $script
    }

    ############################
    ## Extension to help ease write extension procedures
    ##############################
    namespace eval extensions {

        set extensionsLocations [dict create]

        rename ::proc ::__proc
        ::__proc ::proc {name args} {
            set fqdn [string range [uplevel {namespace current}]::$name 2 end]
            #puts "Defining $fqdn $args"
            set callerFrame [info frame [expr [info frame] - 1]]
            #puts "caller: $callerFrame"
            if {$name=="netlify::init"} {
                exit
            }

            if {[dict exists $callerFrame file]} {
                set line [dict get $callerFrame line]
                set file [dict get $callerFrame file]
                dict set ::kiss::extensions::extensionsLocations $fqdn [list $file [expr $line-1]]
            }


            uplevel [list  __proc $name {*}$args]
        }

        proc ::fun {name args} {
            uplevel [list ::proc $name {*}$args]
        }

        proc findLocationOf name {
            if {[dict exists ${::kiss::extensions::extensionsLocations} $name]} {
                return [dict get ${::kiss::extensions::extensionsLocations} $name]
            } else {
                return false
            }
        }

        proc ::kissb.extension {extName args} {

            #set functionsNoComments [regsub -all -linestop #.+ $functions "" ]

            ## ExtName can contain arguments
            set functions [lindex $args 0]
            if {[llength $args]>1} {
                set functions [lindex $args end]
            }

            ## Parameters
            set noLogger [expr {[lsearch -exact $args -noLogger]!=-1 ? true : false }]

            ## Split functions as string to find functions lines
            set functionsLines [lmap line [split "$functions" \n] { string trim $line}]

            #log.info "Functions no comments: $functionsNoComments"
            foreach {procName procArgs procScript} $functions {
                log.debug "Extension $extName.$procName with args $procArgs"

                set procFQN ${extName}.${procName}

                ## Find Definition file
                set __cframe [info frame]
                #puts "frame: $__cframe"
                set callerFrame [info frame [expr ${__cframe} - 1]]
                #puts "caller: $callerFrame"
                if {[dict get $callerFrame type] == "source"} {
                    set fline 0
                    foreach searchLine $functionsLines {
                        #puts "search $procName in $searchLine"
                        if {[string match "$procName *" $searchLine]} {
                            break
                        }
                        incr fline
                    }
                    set line [dict get $callerFrame line]
                    set file [dict get $callerFrame file]
                    dict set ::kiss::extensions::extensionsLocations $extName.$procName [list $file [expr $line+$fline-1]]
                    #puts "$extName.$procName is at: $file:[expr $line+$fline]"
                }

                ## Augment script with logger
                if {!$noLogger} {
                    set procScript [list log.appendLogger $procFQN $procScript ]
                }


                ## Define extension method as proc
                #exit
                proc ::${procFQN} $procArgs $procScript
            }
        }

    }


    #####################
    ## Context
    #####################


    #####################
    ## Env variables
    #####################
    namespace eval env {

        #set _targets [dict create]

        proc ::env {name default} {
            if {[array names ::env -exact $name] == ""} {
                #puts "Setting default for $name to $default"
                #uplevel [list set env($name) $default]
                set ::env($name) $default
                #array set ::env [list $name $default]
            }
            set v $::env($name)
            #puts "Setting ::$name = $v"
            set ::$name $v

            return $v
        }

        proc ::env.unset name {

            array unset ::env $name
        }

        proc ::env.set {name v} {

            set ::env($name) $v
        }

    }

    #####################
    ## Env variables
    #####################
    set ::build.name "default"

    namespace eval vars {

        set _vars [dict create]

        proc get {name {default ""}} {
            if {[dict exists $::kiss::vars::_vars $name]} {
                return [dict get $::kiss::vars::_vars $name value]
            } else {
                return $default
            }

        }

        proc exists {name} {
           return [dict exists $::kiss::vars::_vars $name]
        }

        proc append {name args} {
            #puts "appending to $name $args"
            dict set ::kiss::vars::_vars $name value [concat {*}[get $name {}] $args]
        }
        proc set {name v} {
            if {[dict exists $::kiss::vars::_vars $name]} {
                dict set ::kiss::vars::_vars $name previous [get $name]
            }
            dict set ::kiss::vars::_vars $name value $v
            ::set ::${name} $v
        }
        proc revert {name} {
            if {[dict exists $::kiss::vars::_vars $name previous]} {
                set $name [dict get $::kiss::vars::_vars $name previous]
            }
        }
        ## Define variable
        proc define {name args} {


            if {[llength $args]>0  } {

                ::set defaultVal [lindex $args end]
            }

            # If env variable is defined, use as default value
            ::set envName [string map {. _} [string toupper $name]]
            if {[llength [array names ::env -exact $envName]]>0} {
                ::set defaultVal $::env($envName)
                log.info "Default value for $name from ENV $envName=$defaultVal"
            }

            # Set in dictionarry if not set yet
            if {![dict exists $::kiss::vars::_vars $name]} {
                ::kiss::vars::set $name $defaultVal
            }

            # Take documentation
            kissb.args.withValue -doc doc {
                dict set ::kiss::vars::_vars $name doc $doc
            }


        }





    }

    #############################
    ## Targets
    #############################

    proc ::@ {name args} {
       ::kiss::targets::@ $name {*}$args
    }
    proc ::@> {name args} {
       ::kiss::targets::run $name {*}$args
    }
    namespace eval targets {

        set _targets [dict create]

        proc @ {name args} {
            log.fine "Registering target $name, size of args=[llength $args]"

            # Split Name from doc
            set targetName [lindex $name 0]
            set targetDoc ""
            if {[llength $name] > 1} {
                set targetDoc [lindex $name 1]
            }
            #puts "target $name doc: $targetDoc"

            set script [lindex $args end]
            #log.info "Script is: $script"
            set reqTargets {}
            if {[llength $args]>1} {
                set requiredTargets [lrange $args 0 end-1]
                foreach requiredTarget $requiredTargets {
                    if {$requiredTarget!=":" && $requiredTarget!="<-" } {
                        log.fine "- Required target: $requiredTarget"
                        lappend reqTargets $requiredTarget
                    }
                }
            }
            #dict append::kiss::targets::_targets $name {*}$args
            dict lappend ::kiss::targets::_targets $targetName $reqTargets $targetDoc $script
        }

        proc listTargets args {
            return [dict keys $::kiss::targets::_targets]
        }

        proc getScript target {
            set targetcontent [dict get $::kiss::targets::_targets $target]
            #log.info "Returning $target script: [lindex $targetcontent end]"
            return [lindex $targetcontent end]
        }

        proc getDoc target {
            set targetcontent [dict get $::kiss::targets::_targets $target]
            #log.info "Returning $target script: [lindex $targetcontent end]"
            return [lindex $targetcontent 1]
        }

        proc getRequiredTargets target {
            set targetcontent [dict get $::kiss::targets::_targets $target]
            #log.info "Returning $target script: [lindex $targetcontent end]"
            return [lindex $targetcontent 0]
        }
        proc hasTarget target {
            return [dict exists $::kiss::targets::_targets $target]
        }

        ## Run Target
        proc run {target args} {

            log.fine "Running target: $target with args=$args"
            if {![hasTarget $target]} {
                log.warn "Target $target doesn't exist"
                foreach ptarget [listTargets] {
                    if {[string match -nocase ${target}* ${ptarget}]} {
                        log.warn "- Did you mean: $ptarget ?"
                    }
                }
                return
            }

            set script [getScript $target]
            set reqTargets [getRequiredTargets $target]

            foreach reqTarget $reqTargets {
                uplevel #0 [list ::kiss::targets::run $reqTarget {*}$args]
            }
            #array set env [array get ::env]
            #if {[llength $args]>0} {
            #    set argv {*}$args
            #} else {
            #    set argv {}
            #}

            log.with.logger $target {
                eval $script
            }

            #return [dict keys $::kiss::targets::_targets]
        }

        # Call target without merging calling target args
        proc > {target args} {
            log.info "Call target: $target with args=$args"
            ::kiss::targets::run $target {*}$args
            #uplevel #0 [list ::kiss::targets::run $target {*}$mergedArgs]
        }

        # Call target passing calling target args through
        proc >> {target args} {
            set mergedArgs [concat $args [uplevel [list set args]]]
            log.info "Call target: $target with args=$mergedArgs"
            ::kiss::targets::run $target {*}$mergedArgs
            #uplevel #0 [list ::kiss::targets::run $target {*}$mergedArgs]
        }

    }

    ## Make to run stuff based on file requirements
    proc ::make {out @ in script} {
        if { ([file exists $in] && ![file exists $out]) ||  (![file exists $in] || ([file mtime $in] > [file mtime $out]))} {
            uplevel $script
        }
    }

    #############################
    namespace eval toolchain {

        array set tc {}

        set globalInstallFolder $::env(HOME)/.kissb/toolchains

        proc register {name args} {
            array set ::kiss::toolchain::tc [list $name {*}$args]
        }

        ## Init a toolchain of a given name
        ## The init closure is passed a $toolchainFolder variable pointing to a global folder so that scripts can share toolchain installations
        proc init {name} {

            set toolchainFolder $::kiss::toolchain::globalInstallFolder/$name
            file mkdir $toolchainFolder
            set script [lindex [array get  ::kiss::toolchain::tc $name] 1]
            return [eval $script]
        }
    }


    #############################
    namespace eval sources {

        set src [dict create]

        proc listFilesRecursive {dirs {files {}}} {

            set nextDirs {}
            foreach dir $dirs {
                set filesAndDirs [glob -tails -nocomplain -directory $dir *]
                set foundFiles {}
                foreach f $filesAndDirs {
                    if {[file isdirectory $dir/$f]} {
                        lappend nextDirs $dir/$f
                    } else {
                        lappend foundFiles $dir/$f
                    }
                }
                #puts "Found in files: $foundFiles"
                #puts "Next dirs: $nextDirs"
                set files [concat $files $foundFiles]
            }

            if {[llength $nextDirs] > 0 } {
                return [tailcall listFilesRecursive $nextDirs $files]
            } else {
                return $files
            }


        }

        proc addSourceFolder {module path} {

            files.inDirectory $path {

                set sources [listFilesRecursive . {}]

                if {[llength $sources] == 0} {
                    log.warn "No sources found in $path for module $module"
                }
                dict lappend ::kiss::sources::src $module $path $sources

            }


            return
            #set sources [lmap [::kiss::utils::callIn [pwd] find $path -type f]
            set sources [concat [glob -tails -nocomplain -type f -directory $path **] [glob -tails -nocomplain -type f -directory $path **/*]]
            #set sources [lmap f  { string $f} ]
            if {[llength $sources] == 0} {
                log.warn "No sources found in $path for module $module"
            } else {
                dict lappend ::kiss::sources::src $module $path $sources
            }
            #puts "Found sources: $sources"

        }

        proc getSources module {
            if {[dict exists ${::kiss::sources::src} $module]} {
                ## Returns a list of pairs {basePath sources}
                set allFolders [dict get ${::kiss::sources::src} $module]
                puts "Resolving sources: $allFolders"
                set mergedFiles {}

                foreach {baseDir sources} $allFolders {
                    set mergedFiles [concat $mergedFiles [lmap pathSource $sources { join [list $baseDir $pathSource] /}]]
                }


                return $mergedFiles
            } else {
                return {}
            }
        }

        proc getSourcesDict module {
            if {[dict exists ${::kiss::sources::src} $module]} {
                return [dict get ${::kiss::sources::src} $module]
                set allPaths [dict get ${::kiss::sources::src} $module]
                return [join [lmap pathSources $allPaths { join [lindex $pathSources 0]/[lindex $pathSources end]}]]
                #return [lindex [dict get ${::kiss::sources::src} $module] end]
            } else {
                return {}
            }
        }

        proc getSourceFolders module {
            if {[dict exists ${::kiss::sources::src} $module]} {
                set allPaths [dict get ${::kiss::sources::src} $module]
                return [dict keys $allPaths]
                #return [join [lmap pathSources $allPaths { lindex $pathSources 0}]]
            } else {
                return {}
            }
        }

        proc getModules args {
            return [dict keys ${::kiss::sources::src} *]
        }
    }

    ###############################
    namespace eval dependencies {

        set moduleDeps [dict create]
        set modulesBom [dict create]

        proc addBOM dict {

            set ::kiss::dependencies::modulesBom [dict merge $::kiss::dependencies::modulesBom $dict]
            #puts "BOM is now ${::kiss::dependencies::modulesBom}"
        }

        proc resolveBOMModule {depModuleName} {

            if {[dict exists $::kiss::dependencies::modulesBom $depModuleName]} {
                return ${depModuleName}:[dict get $::kiss::dependencies::modulesBom $depModuleName]
            } else {
                log.warn "Cannot find Dependency $depModuleName in BOM"
                throw KISSB_DEPS_BOM.NOTFOUND "Cannot find Dependency $depModuleName in BOM"
            }
        }

        proc searchBOMModules artifactName {
            return [dict filter $::kiss::dependencies::modulesBom key *:$artifactName]
        }

        ## Adds dependencies to the current dict
        ## The passed dependencies is a dict with format: name {lib xxx sources xxx doc xxxx}
        proc addDeps {module depsDict} {
            dict lappend ::kiss::dependencies::moduleDeps $module {*}$depsDict
        }

        proc addDepSpec {module spec resolver} {

            ## Resolve from BOM if needed
            ## Resolve version if module if provided, or search for modules if only name is provided
            set splitSpec [split $spec :]
            if {[llength $splitSpec]==2} {
                set depModuleName [lindex $splitSpec 0]:[lindex $splitSpec 1]
                set spec [resolveBOMModule $depModuleName]
            } elseif {[llength $splitSpec]==1} {
                set candidates [searchBOMModules [lindex $splitSpec 0]]
                if {[dict size $candidates]==0} {
                    throw KISSB_DEPS.NOTFOUND "No candidates for artifact: $spec"
                } elseif {[dict size $candidates]>1} {
                    throw KISSB_DEPS.NOTFOUND "Too many candidates for artifact: $spec -> $candidates"
                } else {
                    set spec [lindex $candidates 0]:[lindex $candidates end]
                }
            }

            set specDict [dict create $spec [dict create spec $spec resolved false resolver $resolver]]
            dict lappend ::kiss::dependencies::moduleDeps $module {*}$specDict
        }

        proc mergeDeps {module inputDict} {
            set actualDepsDict [dict get $::kiss::dependencies::moduleDeps $module]
            set merged [dict merge $actualDepsDict $inputDict]
            dict set ::kiss::dependencies::moduleDeps $module $merged
        }

        proc getDeps module {
            if {[dict exists $::kiss::dependencies::moduleDeps $module]} {
                return [dict get $::kiss::dependencies::moduleDeps $module]
            } else {
                return {}
            }

        }

        ## The deps specs are the keys of the dict
        proc getDepsSpecs module {
            set currentDeps [getDeps $module]
            return [dict keys $currentDeps *]
        }

        proc resolveDeps {module classifier} {
            set currentDeps [getDeps $module]
            log.debug "Resolve deps for $module, return $classifier for $currentDeps"
            set res {}
            foreach {name resolutionDict} $currentDeps {
                dict with resolutionDict {
                    if {[dict exists $resolutionDict $classifier]} {
                            lappend res [dict get $resolutionDict $classifier]
                    } elseif {$resolved!=false} {
                        dict for {resolvedSpec resolvedDict} $resolved {
                            if {[dict exists $resolvedDict $classifier]} {
                                lappend res [dict get $resolvedDict $classifier]
                            } else {
                                #log.warn "No $classifier in $dict"
                                #string cat ""
                            }
                        }
                    }
                }



            }

            log.debug "Resolved for $module: $res"
            return $res
        }

    }



    #################################

    ############################
    ## Utils and build logic
    ##############################


    proc ::assert {res message} {
        if {!$res} {
            log.error "Assert failed: $message"
            uplevel {return}
        }
    }

    proc ::ignore {test script} {
        if {!$test} {
            uplevel [list eval $script]
        }
    }


    #####################
    ## Errors
    #####################
    namespace eval errors {

        proc prettyv1 {msg options} {
            set errorInfo [dict get $options -errorinfo]
            set lines [split $errorInfo \n]
            set filesPath {}
            set procedures {}
            set errLines {}
            set prevLine ""
            foreach l $lines {
                set l [string trim $l]

                #puts "testing line: $l"
                if {[regexp {\(\s*file\s+\"([\w\.\-\_\/]+)\"\s+line\s+([0-9]+)\s*\)} $l -> file line]==1} {
                    lappend filesPath [list $file $line]
                    lappend errLines "- at $file:$line"
                } elseif {[regexp {\(\s*procedure\s+\"([\w\.\-\_\/:]+)\"\s+line\s+([0-9]+)\s*\)} $l -> proc line]==1} {

                    ## Try to get location
                    #puts "- searching for proc $proc"
                    set __procLoc [::kiss::extensions::findLocationOf $proc]
                    if {${__procLoc}!=false} {
                        lappend errLines "- at $proc, [lindex ${__procLoc} 0]:[expr [lindex ${__procLoc} 1]+$line] : $prevLine"
                    } else {
                        lappend errLines "- at $proc, line $line : $prevLine"
                    }

                }

                set prevLine $l
            }
            log.error $msg
            #foreach filePath $filesPath {
            #    log.error "- at [lindex $filePath 0]:[lindex $filePath 1]"
            #}
            foreach errLine $errLines {
                log.error $errLine
            }
        }
    }


    ############################
    ## Utils
    ##############################


    namespace eval utils {

        proc isWindows  args {
            if {$::tcl_platform(platform)=="windows"} {
                return true
            } else {
                return false
            }
        }
        proc isWindows64  args {
            if {$::tcl_platform(platform)=="windows" && $::tcl_platform(machine) == "amd64"} {
                return true
            } else {
                return false
            }
        }

        proc isLinux  args {
            if {$::tcl_platform(platform)=="unix"} {
                return true
            } else {
                return false
            }
        }

        proc isLinux64  args {
            if {$::tcl_platform(platform)=="unix" && $::tcl_platform(machine) == "x86_64"} {
                return true
            } else {
                return false
            }
        }

        proc isLinuxWSL  args {
            if {$::tcl_platform(platform)=="unix" && [string match *WSL2* [exec uname -a]]} {
                return true
            } else {
                return false
            }
        }


        proc ::isArgv argName {
            return [uplevel [list expr \[ lsearch -exact \$argv $argName\] > -1]]
        }

    }


}
