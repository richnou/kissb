# SPDX-FileCopyrightText: 2024 KISSB 2024
#
# SPDX-License-Identifier: GPL-3.0-or-later

package provide kissb.files 1.0


namespace eval kiss::files {

    proc exists f {
        return [file exists $f]
    }
    
    proc pathSeparator args {
        return $::tcl_platform(pathSeparator)
    }
    proc writeText {f text} {
        set fid [open $f w+]
        puts -nonewline $fid $text
        close $fid
    }
    proc ::files.writeText {f text} {
        kiss::files::writeText $f $text
    }

    proc normalizePath p {
        return [string map {\\ /} $p]
    }

    proc inDirectory {d script} {
        
        file mkdir $d 
        set tmpDir [pwd]
        cd $d 
        try {
            uplevel $script
        } finally {
            cd $tmpDir
        }

    }

    
    ## Extensions
    ##################
    kissb.extension files {

        ## Create directory
        mkdir p {
            file mkdir $p
        }

        delete f {
            if {[file isdirectory $f]} {
                file delete -force $f
            } elseif {[file exists $f]} {
                file delete $f
            } else {
                foreach lf [glob -nocomplain $f] {
                    file delete $lf
                }
            }
        }

        ## Copy file to directory
        ## @arg files -> file or blob
        cp {f dir} {
            if {[file exists $f]} {
                file copy -force  $f $dir
            } else {
                foreach lf [glob -nocomplain $f] {
                    file copy -force  $lf $dir
                }
            }
            
            #foreach f [glob $files] {
            #    file copy -force  $f $dir
            #}
            
        }

        mv {src dst} {
            files.cp $src $dst
            files.delete $src
        }

        cpSubst {files dir} {
            foreach f [glob $files] {
                set fileText [files.read $f]
                set fileTextReplaced [uplevel [list subst $fileText]]
                files.writeText $dir/[file tail $f] $fileTextReplaced
            }
            
        }

        read f {
            set fid [open $f r]
            try {
                return [read $fid]
            } finally {
                close $fid
            }
        }
        writeText {f args} {
            set fid [open $f w+]
            try {
                puts -nonewline $fid [join $args]
            } finally {
                close $fid
            }
        }

        appendText {f args} {
            set fid [open $f a+]
            try {
                puts -nonewline $fid [join $args]
            } finally {
                close $fid
            }
        }
        appendLine {f args} {
            files.appendText $f {*}$args \n
        }


        ## Require File, if not present, run script
        require {f script} {
            if {![file exists $f]} {
                uplevel [list eval $script]
            }
        }
        requireOrForce {f script} {
            if {[env KB_FORCE 0]==1} {
                uplevel [list eval $script]
            } else {
                uplevel [list files.require $f $script]
            }
        }
        requireOrRefresh {f key script} {
            if {[refresh.is $key]} {
                uplevel [list eval $script]
            } else {
                uplevel [list files.require $f $script]
            }
        }

        inDirectory {d script} {
            file mkdir $d 
            set tmpDir [pwd]
            cd $d 
            try {
                uplevel $script
            } finally {
                cd $tmpDir
            }

        }

        ## Download
        download {src {out ""}} {
            #exec wget -p $url -O $dir >@ stdout 2>@ stdout
            if {$out==""} {
                kiss::terminal::execIn [pwd] wget --show-progress -p $src -O [lindex [split $src /] end]
            } else {
                kiss::terminal::execIn [pwd] wget --show-progress -p $src -O $out
            }
            
        }

        ## Unzip
        unzip {f args} {
            exec.run unzip {*}$args $f
        }
        untar {f args} {
            exec.run tar {*}$args -xvaf $f
        }
        extract {f args} {
            if {[string match *.tar.* $f]} {
                files.untar $f {*}$args
            } else {
                files.unzip $f {*}$args
            }
        }

        ## Files writer
        withWriter {outPath script} {
            try {
                kiss::files::writer::open $outPath
                uplevel [list eval $script]
            } finally {
                kiss::files::writer::close
            }
        }

        writer.printLine args {
            kiss::files::writer::printLine {*}$args
        }
        writer.indent args {
            kiss::files::writer::incrIndent
        }
        writer.outdent args {
            kiss::files::writer::decrIndent
        }


        ## PATH
        joinWithPathSeparator args {
            return [join {*}$args [kiss::files::pathSeparator]]
        }

        ## Globbing
        globFiles args {
            return [join [lmap pattern $args {lsort [glob -nocomplain -type f $pattern]}]]
        }
    }


    ##############
    ## Writer 
    ###############
    namespace eval writer {
        
        set indent 0
        set fid -1

        proc incrIndent args {
            incr kiss::files::writer::indent
        }
        proc decrIndent args {
            incr kiss::files::writer::indent  -1
        }
        proc getIndent args {
            return [string repeat " " [expr 4*${kiss::files::writer::indent}]]
        }
    
        proc open file {
            set kiss::files::writer::fid [::open $file w+]
        }
        proc close args {
            ::close ${kiss::files::writer::fid}
        }
        proc printLine args {
            puts ${kiss::files::writer::fid} [getIndent][join $args]
        }
    }
   
}