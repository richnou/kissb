# SPDX-FileCopyrightText: 2024 KISSB
#
# SPDX-License-Identifier: Apache-2.0

package provide kissb.files 1.0

# TCL Lib
package require sha256

namespace eval ::kiss::files {

    proc exists f {
        return [file exists $f]
    }

    proc pathSeparator args {
        return $::tcl_platform(pathSeparator)
    }
    proc writeText {f text} {
        set fid [open $f w+]
        puts -nonewline $fid $text
        close $fid
    }
    proc ::files.writeText {f text} {
        ::kiss::files::writeText $f $text
    }


    proc normalizePath p {
        return [string map {\\ /} $p]
    }

    proc inDirectory {d script} {

        file mkdir $d
        set tmpDir [pwd]
        cd $d
        try {
            uplevel $script
        } finally {
            cd $tmpDir
        }

    }


    ## Extensions
    ##################
    kissb.extension files {

        ## Create directory
        mkdir p {
            file mkdir $p
        }

        delete args {
            foreach f $args {
                if {[file isdirectory $f]} {
                    file delete -force $f
                } elseif {[file exists $f]} {
                    file delete $f
                } else {
                    foreach lf [glob -nocomplain $f] {
                        file delete -force $lf
                    }
                }
            }

        }

        ## Copy file to directory
        ## @arg files -> file or blob
        cp {f dir} {
            if {[file exists $f]} {
                file copy -force  $f $dir
            } else {
                foreach lf [glob -nocomplain $f] {
                    file copy -force  $lf $dir
                }
            }

            #foreach f [glob $files] {
            #    file copy -force  $f $dir
            #}

        }

        mv {src dst} {
            files.cp $src $dst
            files.delete $src
        }

        cpSubst {files dir} {
            foreach f [glob $files] {
                set fileText [files.read $f]
                set fileTextReplaced [uplevel [list subst $fileText]]
                files.writeText $dir/[file tail $f] $fileTextReplaced
            }

        }

        read f {
            set fid [open $f r]
            try {
                return [chan read $fid]
            } finally {
                close $fid
            }
        }
        writeText {f args} {
            set fid [open $f w+]
            try {
                puts -nonewline $fid [join $args]
            } finally {
                close $fid
            }
        }

        appendText {f args} {
            set fid [open $f a+]
            try {
                puts -nonewline $fid [join $args]
            } finally {
                close $fid
            }
        }
        appendLine {f args} {
            files.appendText $f {*}$args \n
        }

        moveFileToTemp f {
            set tempFd [file tempfile _tempfile [file tail $f]]
            puts $tempFd [files.read $f]
            close $tempFd
            return ${_tempfile}

        }


        ## Require File, if not present, run script
        require {f script} {
            if {![file exists $f]} {
                log.warn "File $f is absent, calling script"
                uplevel [list set __f $f]
                uplevel [list eval $script]
            } else {
                log.info "File $f is present, not doing anything"
            }
        }
        requireOrForce {f script} {
            if {[env KB_FORCE 0]==1} {
                uplevel [list set __f $f]
                uplevel [list eval $script]
            } else {
                uplevel [list files.require $f $script]
            }
        }
        requireOrRefresh {f key script} {
            if {[refresh.is $key]} {
                uplevel [list set __f $f]
                uplevel [list eval $script]
            } else {
                uplevel [list files.require $f $script]
            }
        }

        inDirectory {d script} {
            file mkdir $d
            set tmpDir [pwd]
            cd $d
            try {
                uplevel $script
            } finally {
                cd $tmpDir
            }

        }

        inBuildDirectory {d script} {
            set __p ${::kissb.buildDir}/$d
            file mkdir ${__p}
            set tmpDir [pwd]
            cd ${__p}
            try {
                uplevel $script
            } finally {
                cd $tmpDir
            }

        }

        ## Download
        download {src {out ""}} {
            #exec wget -p $url -O $dir >@ stdout 2>@ stdout
            if {$out==""} {
                ::kiss::terminal::execIn [pwd] wget --show-progress $src -O [lindex [split $src /] end]
            } else {
                ::kiss::terminal::execIn [pwd] wget --show-progress $src -O $out
            }

        }

        ## Returns the name of the downloaded file
        downloadOrRefresh {url refresh {outFile ""}} {
            #set outFile [expr {$outFile eq "" ? [file tail $url] : $outFile}]
            set.ifEmpty outFile [file tail $url]
            log.info "URL tail: [file tail $url]"
            files.requireOrRefresh $outFile $refresh {
                log.info "Downloading $url -> $outFile"
                files.download $url $outFile
            }
            return $outFile
        }

        ## Unzip
        unzip {f args} {
            exec.run unzip {*}$args $f
        }
        untar {f args} {
            exec.run tar {*}$args -xvaf $f
        }
        tarDir {dir out args} {
            exec.run tar {*}$args -cvaf $out -C [file normalize $dir/..] [file tail $dir]
        }
        zipDir {dir out args} {
            #exec.run zip -9 -r -y -k $out  $dir
            zipfs mkzip $out [file normalize $dir] [file normalize $dir/..]
        }

        ## Compress dir into output archive
        ## @arg --rename , input dir will be renamed to out file name in output tar
        compressDir {dir out args} {
            if {[file extension $out]==".zip"} {
                files.zipDir $dir $out {*}$args
            } else {
                files.tarDir $dir $out {*}$args
            }
        }

        extract {f args} {
            if {[string match *.tar.* $f]} {
                files.untar $f {*}$args
            } else {
                files.unzip $f {*}$args
            }
        }
        extractAndDelete {f args} {
            try {
                files.extract $f
            } finally {
                files.delete $f
            }
        }

        ## Files writer
        withWriter {outPath script} {
            try {
                ::kiss::files::writer::open $outPath
                uplevel [list eval $script]
            } finally {
                ::kiss::files::writer::close
            }
        }

        writer.printLine args {
            ::kiss::files::writer::printLine {*}$args
        }
        writer.indent args {
            ::kiss::files::writer::incrIndent
        }
        writer.outdent args {
            ::kiss::files::writer::decrIndent
        }


        ## PATH
        joinWithPathSeparator args {
            return [join {*}$args [::kiss::files::pathSeparator]]
        }

        ## Globbing
        globFiles args {
            return [join [lmap pattern $args {lsort [glob -nocomplain -type f $pattern]}]]
        }

        globAll args {
            return [join [lmap pattern $args {lsort [glob -nocomplain  $pattern]}]]
        }

        withGlobFiles {args script} {
            uplevel [list foreach file [files.globFiles {*}$args] $script]
        }
        withGlobAll {args script} {
            uplevel [list foreach file [files.globAll {*}$args] $script]
        }

        ## Permissions
        isExecutable f {
            if {[os.isLinux]} {
                exec.call stat -c %A someFile
            }
        }
        makeExecutable f {
            if {[os.isLinux]} {
                exec.run chmod +x $f
            } else {
                log.error "only supported on linux"
            }
        }

        ## Script Info
        getScriptDirectory args {
            return [file normalize [file dirname [info script]]]
        }

        # Checksums

        ## Checksum the provided file and write to a .sha256 file
        ## @arg -nowrite doesn't write the sha to the file output
        ## @return the calculated sha is -nowrite, or the path to checksum file
        sha256 {file args} {
            #exec.run sha256sum -b $file > ${file}.sha256
            #return ${file}.sha256
            set sha [::sha2::sha256 -hex -file $file]
            kissb.args.containsNot -nowrite {
                files.writeText "${file}.sha256" "$sha [file tail $file]"
                return ${file}.sha256
            } else {
                return $sha

            }
        }
    }


    ##############
    ## Writer
    ###############
    namespace eval writer {

        set indent 0
        set fid -1

        proc incrIndent args {
            incr ::kiss::files::writer::indent
        }
        proc decrIndent args {
            incr ::kiss::files::writer::indent  -1
        }
        proc getIndent args {
            return [string repeat " " [expr 4*${::kiss::files::writer::indent}]]
        }

        proc open file {
            set ::kiss::files::writer::fid [::open $file w+]
        }
        proc close args {
            ::close ${::kiss::files::writer::fid}
        }
        proc printLine args {
            puts ${::kiss::files::writer::fid} [getIndent][join $args]
        }
    }

}
