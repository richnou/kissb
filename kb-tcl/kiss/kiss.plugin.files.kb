# SPDX-FileCopyrightText: 2024 KISSB
#
# SPDX-License-Identifier: Apache-2.0

package provide kissb.files 1.0

# TCL Lib
package require sha256

namespace eval ::kiss::files {

    proc exists f {
        return [file exists $f]
    }

    proc pathSeparator args {
        return $::tcl_platform(pathSeparator)
    }
    proc writeText {f text} {
        set fid [open $f w+]
        puts -nonewline $fid $text
        close $fid
    }
    proc ::files.writeText {f text} {
        ::kiss::files::writeText $f $text
    }


    proc normalizePath p {
        return [string map {\\ /} $p]
    }

    proc inDirectory {d script} {

        file mkdir $d
        set tmpDir [pwd]
        cd $d
        try {
            uplevel $script
        } finally {
            cd $tmpDir
        }

    }


    ## Extensions
    ##################
    kissb.extension files {


        mkdir dir {
            # Create directory
            #  dir - path to directory to be created
            file mkdir $dir
        }

        delete args {
            # Delete provided files in the args list - if a file is not a regular file or directory, the argument is treated as a glob to delete multiple files at once
            #  args - paths to files/directories or glob to be deleted
            #Examples:
            #```tcl
            #files.delete directory1 file2
            #files.delete *.log
            #```
            foreach f $args {
                if {[file isdirectory $f]} {
                    file delete -force $f
                } elseif {[file exists $f]} {
                    file delete $f
                } else {
                    foreach lf [glob -nocomplain $f] {
                        file delete -force $lf
                    }
                }
            }

        }

        download {src {out ""}} {
            # Download source file to target file using wget

            if {$out==""} {
                ::kiss::terminal::execIn [pwd] wget --show-progress $src -O [lindex [split $src /] end]
            } else {
                ::kiss::terminal::execIn [pwd] wget --show-progress $src -O $out
            }

        }


        downloadOrRefresh {url refresh {outFile ""}} {
            # Downloads file from the URL if needed, or if refresh key is set


            #set outFile [expr {$outFile eq "" ? [file tail $url] : $outFile}]
            set.ifEmpty outFile [file tail $url]
            log.info "URL tail: [file tail $url]"
            files.requireOrRefresh $outFile $refresh {
                log.info "Downloading $url -> $outFile"
                files.download $url $outFile
            }
            return $outFile
        }


        globFiles args {
            #

            ## Globbing
            return [join [lmap pattern $args {lsort [glob -nocomplain -type f $pattern]}]]
        }

        globFolders args {
            #

            ## Globbing
            return [join [lmap pattern $args {lsort [glob -nocomplain -type d $pattern]}]]
        }


        globAll args {
            return [join [lmap pattern $args {lsort [glob -nocomplain  $pattern]}]]
        }

        withGlobFiles {args script} {
            uplevel [list foreach file [files.globFiles {*}$args] $script]
        }
        withGlobAll {args script} {
            uplevel [list foreach file [files.globAll {*}$args] $script]
        }

        isFile {path} {
            # Returns true if path is a file and exists

            if {![file isfile $path] ||![file exists $path]} {
                return false
            }
            return true
        }

        isFolder {path} {
            # Returns true if path is a folder and exists

            if {![file isdirectory $path] || ![file exists $path]} {
                return false
            }
            return true
        }

        isEmpty {path} {
            # Returns true if path is a folder and empty

            if {![files.isFolder $path] || [llength [files.globAll $path/*]]==0} {
                return true
            }
            return false
        }

        isAbsolute {path} {
            # Returns true if path is absolute
            set fp [file pathtype $path ]
            return [expr {$fp == "absolute" || $fp == "volumerelative"}]
        }

        isRelative {path} {
            # Returns true if path is relative
            return [expr {[file pathtype $path ] == "relative"}]
        }


        cp {f dir} {
            # Copy file to directory
            #  f - source file
            #  dir - target directory
            if {[file exists $f]} {
                file copy -force  $f $dir
            } else {
                foreach lf [glob -nocomplain $f] {
                    file copy -force  $lf $dir
                }
            }

        }

        mv {src dst} {
            files.cp $src $dst
            files.delete $src
        }

        cpSubst {files dir} {
            foreach f [glob $files] {
                set fileText [files.read $f]
                set fileTextReplaced [uplevel [list subst $fileText]]
                files.writeText $dir/[file tail $f] $fileTextReplaced
            }

        }

        read f {
            set fid [open $f r]
            try {
                return [chan read $fid]
            } finally {
                close $fid
            }
        }

        makeAbsoluteTo {path base} {
            # Returns an absolute path, if path is relative, make it absolute relative to base
            return [expr {[files.isAbsolute $path] ? $path : [file normalize $base/$path]}]
        }

        writeText {f args} {
            # Writes text to provided file
            #  f - Target file
            #  args - joined to a default string with join
            set fid [open $f w+]
            try {
                puts -nonewline $fid [join $args]
            } finally {
                close $fid
            }
        }

        appendText {f args} {
            # Appends test to provided file
            #  f - Target file
            #  args - joined to a default string with join
            set fid [open $f a+]
            try {
                puts -nonewline $fid [join $args]
            } finally {
                close $fid
            }
        }
        appendLine {f args} {
            # Appends Line to provided file
            #  f - Target file
            #  args - joined to a default string with join
            files.appendText $f {*}$args \n
        }



        moveFileToTemp f {
            # Reads and write provided file to a tempfile
            #  f - Source file path
            # If a file is in Zipfs archive but needs to be used by an external command for example, move it to a temporary file on host
            #
            # Returns the path to the created temp file
            set tempFd [file tempfile _tempfile [file tail $f]]
            puts $tempFd [files.read $f]
            close $tempFd
            return ${_tempfile}

        }



        require {f script} {
            # Require File, if not present, run script
            #  f - File to be required
            #  script - Script to be evaluated if the file is not present
            if {![file exists $f]} {
                log.warn "File $f is absent, calling script"
                uplevel [list set __f $f]
                uplevel [list eval $script]
            } else {
                log.info "File $f is present, not doing anything"
            }
        }
        requireOrForce {f script} {
            if {[env KB_FORCE 0]==1} {
                uplevel [list set __f $f]
                uplevel [list eval $script]
            } else {
                uplevel [list files.require $f $script]
            }
        }
        requireOrRefresh {f key script} {
            # Executes $script if the provided file $f doesn't exist, or the refresh key $key was requested
            #  f - path of file to check for existence
            #  key - the key provided by user to kissb as argument --refresh-**key** to force file refresh
            #  script - Script executed, user must ensure it creates the requested file. File path is passed as ${__f} variable
            #
            # Doesn't return anything.

            if {[refresh.is $key]} {
                uplevel [list set __f $f]
                uplevel [list eval $script]
            } else {
                uplevel [list files.require $f $script]
            }
        }

        inDirectory {d script} {
            file mkdir $d
            set tmpDir [pwd]
            cd $d
            try {
                uplevel $script
            } finally {
                cd $tmpDir
            }

        }

        inBuildDirectory {d script} {
            set __p ${::kissb.buildDir}/$d
            file mkdir ${__p}
            set tmpDir [pwd]
            cd ${__p}
            try {
                uplevel $script
            } finally {
                cd $tmpDir
            }

        }





        unzip {f args} {
            # Unzip
            exec.run unzip {*}$args $f
        }
        untar {f args} {
            exec.run tar {*}$args -xvaf $f
        }
        tarDir {dir out args} {
            exec.run tar {*}$args -cvaf $out -C [file normalize $dir/..] [file tail $dir]
        }
        zipDir {dir out args} {

            zipfs mkzip $out [file normalize $dir] [file normalize $dir/..]
        }


        compressDir {dir out args} {
            # Compress dir into output archive
            # @arg --rename , input dir will be renamed to out file name in output tar

            if {[file extension $out]==".zip"} {
                files.zipDir $dir $out {*}$args
            } else {
                files.tarDir $dir $out {*}$args
            }
        }

        extract {f args} {
            if {[string match *.tar.* $f]} {
                files.untar $f {*}$args
            } else {
                files.unzip $f {*}$args
            }
        }
        extractAndDelete {f args} {
            try {
                files.extract $f
            } finally {
                files.delete $f
            }
        }


        withWriter {outPath script} {
            # Files writer
            try {
                ::kiss::files::writer::open $outPath
                uplevel [list eval $script]
            }  finally {
                catch {::kiss::files::writer::close}
            }
        }

        writer.printLine args {
            ::kiss::files::writer::printLine {*}$args
        }
        writer.println args {
            ::kiss::files::writer::printLine {*}$args
        }
        writer.print  args {
            ::kiss::files::writer::print {*}$args
        }
        writer.indent args {
            ::kiss::files::writer::incrIndent
        }
        writer.outdent args {
            ::kiss::files::writer::decrIndent
        }



        joinWithPathSeparator args {
            #

            ## PATH
            return [join {*}$args [::kiss::files::pathSeparator]]
        }





        isExecutable {f {for -user}} {
            # Returns true if a file is executable for the owner by default
            #  for - pass -group or -other or -user to check specific group execution

            ## Permissions
            set perm [file attributes $f -permissions]
            if {$for=="-other"} {
                return [expr {($perm >> 0) & 0x1}]
            } elseif {$for == "-group"} {
                return [expr {($perm >> 3) & 0x1}]
            } else {
                return [expr {($perm >> 6) & 0x1}]
            }

        }

        makeExecutable {f args} {
            # Makes a file executable by setting user permissin to +x

            file attributes $f -permissions u+x
        }


        getScriptDirectory args {
            # Returns the directory of the current running script
            #


            # Script Info
            return [file normalize [file dirname [info script]]]
        }


        sha256 {file args} {
            # Checksum the provided file and write to a .sha256 file
            #   file - Sourec file to checksum
            #   args - Use -nowrite to not  write the sha to the file output
            #
            # Returns the calculated sha if -nowrite, or the path to checksum file

            #exec.run sha256sum -b $file > ${file}.sha256
            #return ${file}.sha256
            set sha [::sha2::sha256 -hex -file $file]
            kissb.args.containsNot -nowrite {
                files.writeText "${file}.sha256" "$sha [file tail $file]"
                return ${file}.sha256
            } else {
                return $sha

            }
        }
    }


    ##############
    ## Writer
    ###############
    namespace eval writer {

        set indent 0
        set fid -1

        proc incrIndent args {
            incr ::kiss::files::writer::indent
        }
        proc decrIndent args {
            incr ::kiss::files::writer::indent  -1
        }
        proc getIndent args {
            return [string repeat " " [expr 4*${::kiss::files::writer::indent}]]
        }

        proc open file {

            set ::kiss::files::writer::fid [::open $file w+]
            log.debug "Opening file writer to ${::kiss::files::writer::fid}"
        }
        proc close args {
            log.debug "Closing file writer to ${::kiss::files::writer::fid}"
            ::close ${::kiss::files::writer::fid}
            set ::kiss::files::writer::fid -1
        }
        proc printLine args {
            puts ${::kiss::files::writer::fid} [getIndent][join $args]
        }
        proc print args {
            puts -nonewline ${::kiss::files::writer::fid} [getIndent][join $args]
        }
    }

}
