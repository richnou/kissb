# SPDX-FileCopyrightText: 2024 KISSB
#
# SPDX-License-Identifier: Apache-2.0


############################
## Modules
##############################
kissb.extension kissb {

    module.path path {

        set path [file normalize $path]
        if {![file exists $path]} {
            log.warn "module.path $path doesn't not exist"
        } elseif {[file exists $path/pkgIndex.tcl]} {
            set dir $path
            source $path/pkgIndex.tcl
        }
        #lappend ::kiss::packages::modulepaths $path
    }

}

############################
## Targets
##############################
kissb.extension targets -noLogger {

    exists name {
        return [::kiss::targets::exists $name]

    }

    ensure {name args} {
        # Creates named target if doesn't exist
        if {![targets.exists $name]} {
            uplevel [list targets.create $name  {*}$args]
        }
    }

    create {name args} {
        uplevel [list ::kiss::targets::@ $name {*}$args]
    }

}


############################
## Core extension -> language
##############################

kissb.extension kissb {

    args.contains {v {script {}} {else ""} {elseScript {}}} {
        # Tests if $args contains a specific argument, runs script if so, or elseScript if provided
        #   v - Value to be tested
        #   script - Script to be run if $args contains $v
        #   else - Dummy word for syntax, just write "else"
        #   elseScript - Script to be run if $args doesn't contain $v
        #
        # Returns true or false so that this method can be used without script
        #
        # ```tcl
        #proc foo args {
        #    kissb.args.contains -test {
        #        puts "-test passed"
        #    }
        #    kissb.args.contains -test {
        #        puts "-test passed"
        #    } else {
        #        puts "-test not passed"
        #    }
        #    if {[kissb.args.contains -test]} {
        #        puts "-test passed"
        #    } else {
        #        puts "-test not passed"
        #    }
        #}
        #foo -test
        #foo
        #```

        set localArgs [uplevel {::set args}]
        if {[lsearch -exact $localArgs $v]!=-1} {
            uplevel [list eval $script]
            return true
        } else {
            uplevel [list eval $elseScript]
            return false
        }
    }

    args.containsNot {v {script {}} {else ""} {elseScript {}}} {
        # Tests if $args doesn't contains a specific argument, runs script if so, or elseScript if provided
        # See [::kissb.args.contains](#kissbargscontains) for usage
        #
        # Returns true or false
        set localArgs [uplevel {::set args}]
        if {[lsearch -exact $localArgs $v]==-1} {
            uplevel [list eval $script]
            return true
        } else {
            uplevel [list eval $elseScript]
            return false
        }
    }

    args.withValue {v varname script} {
        # Runs provided script with the $args value for $v passed as $varname
        #  v - switch to test in $args
        #  varname - the name of the variable to set the value of the $v argument to
        #  script - the script to run if $v is present in $args
        set args [uplevel {::set args}]
        kissb.args.contains $v {
            uplevel [list ::set $varname [lindex $args [expr [lsearch -exact $args $v]+1]]]
            uplevel [list eval $script]
        }
    }

    args.get {v default {to ""} {varname ""}} {
        # Returns the value of $v switch in $args, or a default value
        # if to and $varname are provided, the variable represented by varname will be set to the value
        #  v - switch to test in $args
        #  default - Default value if $v is not in $args
        #  to - Dummy word, set to "to" or "->" for example
        #  varname - pass the name of a variable to set to the $v value or $default
        #
        # Returns the value of $v in $args or $default
        set localArgs [uplevel {::set args}]

        # Get default or val from args
        set __val $default
        if {[lsearch -exact $localArgs $v]!=-1} {
            set __val [lindex $localArgs [lsearch -exact $localArgs $v]+1]
        }

        # set to requested varname
        if {$to!=""} {
            uplevel [list ::set $varname ${__val}]
        }
        return ${__val}
    }


    args.getFirstNotSwitch {default {-> ""} {varname ""}} {
        ## Returns value to first arg not a switch, or return default.
        ## If getFirstNotSwitch default -> varName syntax used, value also set to variable varname
        set localArgs [uplevel {::set args}]
        set firstMatch [lsearch -not -glob $localArgs -*]
        if {$firstMatch!=-1} {
            set ret [lindex $localArgs [expr $firstMatch]]
        }  else {
            set ret $default
        }
        if {$varname!=""} {
            uplevel [list set $varname $ret]
        }

        return $ret

    }


    args.after {v default {to ""} {varname ""}} {
        ## Returns arguments after a specific one, eg. CMD arg arg -- arg arg to get all arguments after --
        set localArgs [uplevel {::set args}]

        # Get default or val from args
        set __val $default
        set __indexOfArg [lsearch -exact $localArgs $v]
        if {${__indexOfArg}!=-1} {
            set __val [lrange $localArgs [expr ${__indexOfArg} +1] end]
        }

        # set to requested varname
        if {$to!=""} {
            uplevel [list ::set $varname ${__val}]
        }
        return ${__val}
    }


    args.popAfter {v default {to ""} {varname ""}} {
        ## @see args.after , gathered arguments are removed from the args
        set localArgs [uplevel {::set args}]

        # Get default or val from args
        set __val $default
        set __indexOfArg [lsearch -exact $localArgs $v]
        if {${__indexOfArg}!=-1} {
            set __val [lrange $localArgs [expr ${__indexOfArg} +1] end]
            uplevel [set args [lrange $localArgs 0 [expr ${__indexOfArg} - 1]]
        }

        # set to requested varname
        if {$to!="" && $varname!=""} {
            uplevel [list ::set $varname ${__val}]
        }

        return ${__val}
    }


    each {lst script} {
        foreach v $lst {
            uplevel [list set it $v]
            uplevel [list eval $script]
        }
    }

}

##############################
## vars extension
##############################
kissb.extension vars -noLogger {


    define {name args} {
        # Define a variable, with documentation, default value also extracted from environment variable
        # name - name of the variable created in :: global space
        # args - list of arguments, add -doc "DOC" to document the variable, the last value of the list is used as default value
        ::kiss::vars::define $name {*}$args
        return [vars.get $name]
    }


    set {name v} {
        ## Set value for a variable
        ::kiss::vars::set $name $v
        return [vars.get $name]
    }

    revert {args} {
        foreach n $args {
            ::kiss::vars::revert $n
        }

    }

    ensure {name args} {
        ## This method will set the var if not set
        if {![vars.exists $name]} {
            return [vars.set $name {*}$args]
        } else {
            return [vars.get $name]
        }
    }

    append {name args} {
        foreach v $args {
             ::kiss::vars::append $name $v
        }
    }

    get {name {v ""}} {
        return [::kiss::vars::get $name $v]
    }

    exists name {
        return [::kiss::vars::exists $name]
    }


    resolve {spec {default ""}} {
        ## Module based variable resolution


        # Split at . MODULE/MODULE/MODULE.VAR.VAR.VAR , and take first result
        set module [lindex [split $spec .] 0]
        set name   [join [lrange [split $spec .] 1 end] .]

        # For a module a/b/c, build search paths: a/b/c.VAR , a/b.VAR then a.VAR   (override effect)
        set i 0
        set candidates {}
        set splitModuleNames [split $module /]
        foreach splitName $splitModuleNames {
            set splitName [lindex [split $splitName .] 0]
            set candidateName [join [lrange $splitModuleNames 0 end-$i] /]
            lappend candidates $candidateName
            incr i
        }
        foreach candidate $candidates {
            #log.info "Searching for var $name in $candidate"
            if {[vars.exists ${candidate}.${name}]} {
                return [vars.get ${candidate}.${name}]
            }
        }

        if {$default==""} {
            return -error "Variable could not be resolved: $spec"
        } else {
            return $default
        }
    }

    dict.withKeyValue {dictVar args} {
        # Runs script with passed value of last key as varname if exists
        # Example: dict.with.keyValue dictVar a b c { puts "Value of $c" }
        set script [lindex $args end]
        set keys [lrange $args 0 end-1]

        #log.info "running dict with on  [set $dictVar] -> $keys"
        if {[dict exists [set $dictVar] {*}$keys]} {
            #set [lindex $keys end] [dict get [set $dictVar] {*}$keys]
            #uplevel [list apply $script [dict get [set $dictVar] {*}$keys]]
            #set script [concat [list set [lindex $keys end] [dict get [set $dictVar] {*}$keys]] $script]
            #uplevel  $script
            uplevel [list set [lindex $keys end] [dict get [set $dictVar] {*}$keys]]
            uplevel $script
        }

        #try {
        #    log.info "running dict with on $varname -> $args"
        #    dict with $varname {*}$keys $body
        #} on error {msg stack} {
        #    log.warn "dict.with error: $msg"
        #}
    }
}

## Standard set extensions
proc ::set.ifEmpty {varName value} {
    set vVal [string trim [uplevel [list set $varName]]]
    if {$vVal eq ""} {
        uplevel [list set $varName $value]
    }
}

##############################
## env extension
##############################
kissb.extension env {

    isDefined name {
        return [expr [llength [array get ::env $name]] > 0 ? true : false]
    }
}

##############################
## Dependencies extension
##############################
kissb.extension dependencies {


    bom dict {
        ## Save provided dict in bom


        #log.info "Adding BOM: $spec"
        ::kiss::dependencies::addBOM $dict
    }

    add {module resolver args} {

        foreach dSpecs $args {
            foreach dSpec $dSpecs {
                log.info "Adding Dependency: $dSpec"
                ::kiss::dependencies::addDepSpec $module $dSpec $resolver
            }
        }

    }

    getDeps {module args} {
        return [::kiss::dependencies::getDeps $module]
    }

    resolve {module type args} {
        return [::kiss::dependencies::resolveDeps $module $type]
    }
}

##############################
## Dependencies extension
##############################
kissb.extension sources {


    add {module folder} {
        ## Save provided dict in bom
        ::kiss::sources::addSourceFolder $module $folder
    }
}

#####################
## Asserts
#####################

kissb.extension assert {

    isFile {path msg} {
        if {![file isfile $path]} {
            error "File doesn't exist:$path , $msg"
        }
    }
}


#####################
## OS
######################

kissb.extension os {

    isWindows  args {
        if {$::tcl_platform(platform)=="windows"} {
            return true
        } else {
            return false
        }
    }
    isWindows64  args {
        if {$::tcl_platform(platform)=="windows" && $::tcl_platform(machine) == "amd64"} {
            return true
        } else {
            return false
        }
    }

    isLinux  args {
        if {$::tcl_platform(platform)=="unix"} {
            return true
        } else {
            return false
        }
    }

    isLinux64  args {
        if {$::tcl_platform(platform)=="unix" && $::tcl_platform(machine) == "x86_64"} {
            return true
        } else {
            return false
        }
    }

    isLinuxWSL  args {
        if {$::tcl_platform(platform)=="unix" && [string match *WSL2* [exec uname -a]]} {
            return true
        } else {
            return false
        }
    }
}
