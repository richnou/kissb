package provide kiss 1.0
#package require TclCurl

namespace eval kiss {


    #####################
    ## Context
    #####################


    #####################
    ## Env variables
    #####################
    namespace eval env {

        #set _targets [dict create]

        proc ::env {name default} {
            if {[array names ::env -exact $name] == ""} {
                puts "Setting default for $name to $default"
                #uplevel [list set env($name) $default]
                set ::env($name) $default
                #array set ::env [list $name $default]
            }
            set v $::env($name)
            puts "Setting ::$name = $v"
            set ::$name $v

            return $v
        }

        proc ::env.unset name {
        
            array unset ::env $name
        }

    }

    #####################
    ## Env variables
    #####################
    set ::build.name "default"

    namespace eval vars {

        set _vars [dict create]

        proc append {name args} {
            dict lappend kiss::vars::_vars $name {*}$args
        }
        proc set {name v} {
            dict lappend kiss::vars::_vars $name $v
            ::set ::${name} $v
        }
        proc get {name {default {}}} {
            if {[dict exists $kiss::vars::_vars $name]} {
                return [dict get $kiss::vars::_vars $name]
            } else {
                return $default
            }
            
        }

    }

    #############################
    ## Targets
    #############################

    proc ::@ {name args} {
        kiss::targets::@ $name {*}$args
    }
    namespace eval targets {

        set _targets [dict create]

        proc @ {name args} {
            log.info "Registering target $name, size of args=[llength $args]"
            set script [lindex $args end]
            #log.info "Script is: $script"
            set reqTargets {}
            if {[llength $args]>1} {
                set requiredTargets [lrange $args 0 end-1]
                foreach requiredTarget $requiredTargets {
                    if {$requiredTarget!=":" && $requiredTarget!="<-" } {
                        log.info "- Required target: $requiredTarget"
                        lappend reqTargets $requiredTarget
                    }
                }
            } 
            #dict append kiss::targets::_targets $name {*}$args
            dict lappend kiss::targets::_targets $name $reqTargets $script 
        }

        proc listTargets args {
            return [dict keys $::kiss::targets::_targets]
        }

        proc getScript target {
            set targetcontent [dict get $::kiss::targets::_targets $target]
            #log.info "Returning $target script: [lindex $targetcontent end]"
            return [lindex $targetcontent end]
        }

        ## Run Target
        proc run {target args} {
            set script [getScript $target]
            array set env [array get ::env]
            if {[llength $args]>0} {
                set argv {*}$args
            } else {
                set argv {}
            }
            
            log.with.logger $target {
                eval $script
            }
            
            #return [dict keys $::kiss::targets::_targets]
        }

        proc ::> {target args} {
            log.info "Require target: $target"
            kiss::targets::run $target {*}$args
        }

    }

    ## Make to run stuff based on file requirements
    proc ::make {out @ in script} {
        if { ([file exists $in] && ![file exists $out]) ||  (![file exists $in] || ([file mtime $in] > [file mtime $out]))} {
            uplevel $script
        }
    }

    #############################
    namespace eval toolchain {

        array set tc {}

        set globalInstallFolder $::env(HOME)/.kissb/toolchains

        proc register {name args} {
            array set kiss::toolchain::tc [list $name {*}$args]
        }

        ## Init a toolchain of a given name
        ## The init closure is passed a $toolchainFolder variable pointing to a global folder so that scripts can share toolchain installations
        proc init {name} {
            
            set toolchainFolder $kiss::toolchain::globalInstallFolder/$name
            file mkdir $toolchainFolder
            set script [lindex [array get  kiss::toolchain::tc $name] 1]
            return [eval $script]
        }
    }


    #############################
    namespace eval sources {

        set src [dict create]

        proc addSourceFolder {module path} {
            #set sources [lmap [kiss::utils::callIn [pwd] find $path -type f]
            set sources [lmap f [glob -nocomplain -type f -path $path **/*] { file normalize $f} ]
            puts "Found sources: $sources"
            dict lappend kiss::sources::src $module [list $path $sources]
        }

        proc getSources module {
            if {[dict exists ${kiss::sources::src} $module]} {
                set allPaths [dict get ${kiss::sources::src} $module]
                return [join [lmap pathSources $allPaths { lindex $pathSources end}]]
                #return [lindex [dict get ${kiss::sources::src} $module] end]
            } else {
                return {}
            }
        }
        proc getSourceFolders module {
            if {[dict exists ${kiss::sources::src} $module]} {
                set allPaths [dict get ${kiss::sources::src} $module]
                return [join [lmap pathSources $allPaths { lindex $pathSources 0}]]
            } else {
                return {}
            }
        }
    }

    ###############################
    namespace eval dependencies {

        set moduleDeps [dict create]

        ## Adds dependencies to the current dict
        ## The passed dependencies is a dict with format: name {lib xxx sources xxx doc xxxx}
        proc addDeps {module depsDict} {
            #dict lappend kiss::dependencies::moduleDeps $module {*}$args
            dict lappend kiss::dependencies::moduleDeps $module {*}$depsDict
        }

        proc getDeps module {
            if {[dict exists $kiss::dependencies::moduleDeps $module]} {
                return [dict get $kiss::dependencies::moduleDeps $module]
            } else {
                return {}
            }
             
        }

        proc resolveDeps {module classifier} {
            set currentDeps [getDeps $module]

            set res [lmap {name dict} $currentDeps {
                if {[dict exists $dict $classifier]} {
                    dict get $dict $classifier
                } else {
                    log.warn "No $classifier in $dict"
                    string cat ""
                }
                
            }]
            log.debug "Resolved for $module: $res"
            return $res 
        }

    }

    

    #################################

    ############################
    ## Utils and build logic
    ##############################
    if {[llength [array get ::env KB_REFRESH]] >0} {
        set ::refresh true
    } else {
        set ::refresh false
    }

    ## Runs the script if condition is not satistifed or refresh is requested
    ## Useful to install libs only if not present or global refresh is required
    proc ifRefreshOrNot v {
        if {$v == true || [llength [array get ::env KB_REFRESH]] >0} {
            return true 
        } else {
            return false
        }
    }
    proc ifRefresh args {
        if {[llength [array get ::env KB_REFRESH]] >0} {
            return true 
        } else {
            return false
        }
    }
    proc withIfRefreshOrNot {v script} {
        if {[ifRefreshOrNot $v]} {
            uplevel [list eval $script]
        } 
    }
    proc withIfRefresh {v script} {
        if {[ifRefresh]} {
            uplevel [list eval $script]
        } 
    }

    proc ::withArgsContains {v script {else ""} {elseScript {}}} {
        set localArgs [uplevel {set args}]
        if {[lsearch -exact $localArgs $v]!=-1} {
            uplevel [list eval $script]
        } else {
            uplevel [list eval $elseScript]
        }
    }

    proc ::assert {res message} {
        if {!$res} {
            log.error "Assert failed: $message"
            uplevel {return}
        }
    }

    proc ::ignore {test script} {
        if {!$test} {
            uplevel [list eval $script]
        }
    }

    ############################
    ## Extension to help ease write extension procedures
    ##############################
    proc ::kiss.extension {extName functions} {
        
        set functionsNoComments [regsub -all -linestop #.+ $functions "" ]
        
        #log.info "Functions no comments: $functionsNoComments"
        foreach {procName procArgs procScript} $functionsNoComments {
            #log.info "Extension $procName with args $procArgs"
            proc ::${extName}.${procName} $procArgs $procScript
        }
    }

    ############################
    ## Utils
    ##############################


    namespace eval utils {

        proc isWindows  args {
            if {$::tcl_platform(platform)=="windows"} {
                return true 
            } else {
                return false
            } 
        }
        proc isWindows64  args {
            if {$::tcl_platform(platform)=="windows" && $::tcl_platform(machine) == "amd64"} {
                return true 
            } else {
                return false
            } 
        }

        proc isLinux  args {
            if {$::tcl_platform(platform)=="unix"} {
                return true 
            } else {
                return false
            } 
        }

        proc isLinux64  args {
            if {$::tcl_platform(platform)=="unix" && $::tcl_platform(machine) == "x86_64"} {
                return true 
            } else {
                return false
            } 
        }

        proc isLinuxWSL  args {
            if {$::tcl_platform(platform)=="unix" && [string match *WSL2* [exec uname -a]]} {
                return true 
            } else {
                return false
            } 
        }


        proc ::isArgv argName {
            return [uplevel [list expr \[ lsearch -exact \$argv $argName\] > -1]]
        }

        proc download {url dir} {
            exec wget -p $url -O $dir >@ stdout 2>@ stdout
        }

        ## Exec redirecting outputs to console
        proc execIn {folder args} {
            set pwd [pwd]
            file mkdir $folder
            cd $folder 
            try {
                return [exec {*}${args} >@ stdout 2>@ stdout]
            } finally {
                cd $pwd
            }
            
        }

         ## Exec redirecting outputs to console
        proc forkIn {folder args} {
            set pwd [pwd]
            file mkdir $folder
            cd $folder 
            try {
                return [exec {*}${args} >@ stdout 2>@ stdout &]
            } finally {
                cd $pwd
            }
            
        }

        ## Exec returning stdout as function result
        proc callIn {folder args} {
            set pwd [pwd]
            file mkdir $folder
            cd $folder 
            try {
                return [exec {*}${args}]
            } finally {
                cd $pwd
            }
            
        }

    }

}