# SPDX-FileCopyrightText: 2024 KISSB
#
# SPDX-License-Identifier: Apache-2.0

package provide kissb.log 1.0
catch {package require term::ansi::send}

fconfigure stdout -translation binary

namespace eval kiss::log {


    ## Utils
    ## Hex codes for emoji: https://dev.to/rodrigoodhin/list-of-emojis-hex-codes-35ma
    #############
    set ::kiss.log.level INFO
    set ::kiss.log.name {top} 

    proc log.get.level args {
        return ${::kiss.log.level}
    }
    proc log.set.level level {
        set ::kiss.log.level $level
    }

    proc log.get.name args {
        return ${::kiss.log.name}
    }
    proc log.set.name n {
        set ::kiss.log.name $n
    }

    proc log.set.fine args {
        set ::kiss.log.level FINE
    }
    proc log.set.info args {
        set ::kiss.log.level INFO 
    }

    proc log {level message} {
        #  [uplevel 2 [list namespace current]] 
        puts "${level}.${::kiss.log.name} $message"
    }
    proc isColorTerm args {
        set sendPresent [::catch {package present term::ansi::send}]
        if {$sendPresent} {
            return 0
        } else {
            return 1
        }
    }

    proc log.with.logger {logger args} {
        set __n [log.get.name]
        log.set.name ${__n}.$logger
        try {
            uplevel {*}$args
        } finally {
            log.set.name ${__n}
        }
    }

    proc log.withLogger {logger args} {
        set __n [log.get.name]
        log.set.name $logger
        try {
            uplevel {*}$args
        } finally {
            log.set.name ${__n}
        }
    }

    proc log.with {level args} {
        set l [log.get.level]
        log.set.level $level
        try {
            uplevel $args
        } finally {
            log.set.level $l
        }
    }
    
    proc log.with.info args {
        log.with FINE {*}$args
    }
    proc log.with.warn args {
        log.with FINE {*}$args
    }
    proc log.with.fine args {
        log.with FINE {*}$args
    }
    proc log.with.debug args {
        log.with DEBUG {*}$args
    }
    
    proc log.message {level message {color "::term::ansi::send::sda_fgdefault"} {icon ""} {prefix ""} {postfix ""} } {
        
        
        if {[isColorTerm]} {
                try {
                    $color
                    puts "${level}.${::kiss.log.name} ${icon}${prefix}${message}${postfix}"
                } finally {
                    ::term::ansi::send::sda_fgdefault
                } 
            } else {
                puts "${level}.${::kiss.log.name} ${prefix}${message}${postfix}"
            }
            return
        uplevel [subst {
            if {[isColorTerm]} {
                try {
                    $color
                    puts "$message"
                    #puts "${level}.${::kiss.log.name} ${icon}${prefix}${message}${postfix}"
                } finally {
                    ::term::ansi::send::sda_fgdefault
                } 
            } else {
                puts "${level}.${::kiss.log.name} ${prefix}${message}${postfix}"
            }
        }]
    }

    proc log.fatal {message args} {
        try {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgred} }
            log FATA $message
            kissb.args.ifContains -exit {
                ::exit -1
            }
            #::exit -1
            error $message  $message
        } finally {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgdefault} }
        }
        
    }
    proc log.error message {
        
        #puts $message
        set args [list ERRO $message ::term::ansi::send::sda_fgred "\xE2\x9D\x8C " "" "" ]
        uplevel [list log.message {*}$args]
        return
        try {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgred} }
            log ERRO "\xE2\x9D\x8C $message"
        } finally {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgdefault} }
        }
        
    }
    proc log.warn message {
        uplevel [list log.message WARN $message ::term::ansi::send::sda_fgyellow "\xE2\x9A\xA0 " "" "" ]
        return
        try {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgyellow} }
            log WARN "\xE2\x9A\xA0 $message"
        } finally {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgdefault} }
        }
        
    }

    proc log.success message {
        uplevel [list log.message SUCC $message ::term::ansi::send::sda_fggreen "\xE2\x98\x91 " "" "" ]
        return
        try {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fggreen} }
            log SUCC $message
        } finally {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgdefault} }
        }
        
    }

    proc log.info message {
        uplevel [list log.message INFO $message ::term::ansi::send::sda_fgcyan "" "" "" ]
        return
        try {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgcyan} }
            log INFO $message
        } finally {
            if {[isColorTerm]} { catch {::term::ansi::send::sda_fgdefault} }
        }
        
    }
    proc log.fine message {
        if {[log.get.level] == "FINE" || [log.get.level] == "DEBUG"} {
            uplevel [list log.message FINE $message ::term::ansi::send::sda_fgdefault "" "" "" ]
            return
        }   
    }
    proc log.debug message {
        if {[log.get.level] == "DEBUG"} {
            uplevel [list log.message DBUG $message ::term::ansi::send::sda_fgdefault "" "" "" ]
        }   
    }
    

    #puts "Export/Import log"
    namespace export log*
    namespace eval :: {
        namespace import kiss::log::log.*
    }

}