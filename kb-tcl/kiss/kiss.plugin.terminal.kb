package provide kissb.terminal 1.0
 

namespace eval kiss::terminal {

    ## Exec redirecting outputs to console
    proc execIn {folder args} {
        set pwd [pwd]
        file mkdir $folder
        cd $folder 
        try {
            return [exec {*}${args} >@ stdout 2>@ stdout]
        } on error e {
            #log.error "Error running command $args ($e)"
            throw e "Error running command $args ($e)"
        } finally {
            cd $pwd
        }
        
    }

    ## Exec redirecting outputs to console
    proc forkIn {folder args} {
        set pwd [pwd]
        file mkdir $folder
        cd $folder 
        try {
            return [exec {*}${args} >@ stdout 2>@ stdout &]
        } on error e {
            log.error "Error running command $args"
        } finally {
            cd $pwd
        }
        
    }

    ## Exec returning stdout as function result
    proc callIn {folder args} {
        set pwd [pwd]
        file mkdir $folder
        cd $folder 
        try {
            # 2> /dev/null
            return [exec {*}${args}]
        } on error {output options} {
            if {[dict get $options -errorcode]!= "NONE"} {
                log.error "Error running command $args"
                log.error "- res: $options"

                log.error "Error running command $args ($options)"
                throw e "Error running command $args ($options)"
                
            } else {
                # If error code is NONE, there was no error, only stderr had content, so just return stdout output
                return $output
            }
           

        } finally {
            cd $pwd
        }
        
    }

    ## Fork Xterm in the give folder with provided command
    proc xterm-in {folder args} {
        kiss::terminal::forkIn $folder xterm -fa "Noto Mono" -fs 12 -e {*}$args
    }

    ## Fork Xterm in the give folder with provided command
    proc xterm args {
        kiss::terminal::forkIn . xterm -fa "Noto Mono" -fs 12 -e {*}$args
    }


    namespace export xterm* call* fork* exec*
    namespace eval :: {
        namespace import kiss::terminal::xterm* kiss::terminal::call* kiss::terminal::fork* kiss::terminal::exec*
    }

    kissb.extension exec {

        run args {
            kiss::terminal::execIn [pwd] {*}$args
        }

        call args {
            return [kiss::terminal::callIn [pwd] {*}$args]
        }

        ## Runs a command and returns a dict of env based on export lines
        cmdGetBashEnv args {
            return [exec.bashEnvToDict [{*}$args]]
        }

        ## Converts "export XXX=YYY" lines to an environment dict
        bashEnvToDict str {
            set res [dict create]
            foreach l [split $str \n] {
                #log.info "Bash env Line: $l"
                if {[regexp {export\s+([\w_]+)=(?:\"?([^\"]+)\"?)} $l -> name value]} {
                    
                    #log.info "- env var $name -> $value"
                    dict update res $name envVal {
                        dict set envVal merge [string match *\$${name}* $value]
                        set value [regsub -all :?\\$${name} $value ""]
                        dict lappend envVal value $value
                    }
                    continue
                  
                }
           
            }
            return $res
        }

        ## Env
        ###########
        withEnv {envDict args} {

            ## Update env
            set envBackup [dict create]
            dict for {name spec} $envDict {
                ## Save env var value before merging or updating
                set currentEnvVal ""
                if {[llength [array get ::env $name]]!=0} {
                    dict set envBackup $name $::env($name)
                    set currentEnvVal $::env($name)
                }
                ## Update env with current dict var
                dict with spec {
                    if {$merge == 0} {
                        set ::env($name) [join $value]
                    } else {
                        set ::env($name) [join [concat {*}$value $currentEnvVal] ":"]
                    }
                }

            }

            ## run 
            try {
                #puts "ENV: $::env(PATH)"
                if {[llength $args]>1} {
                    uplevel [list {*}$args]
                } elseif {[llength $args]==1} {
                    uplevel [lindex $args 0]
                }
                
            } finally {
                ## restore env
                dict for {name v} $envBackup {
                    set ::env($name) $v
                }
            }
            
        }


    }
}